#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

lt - generate Latex environment Templates, (for use within vim).

=head1 SYNOPSIS

lt [--help] [--example='blah blah']
            [--equation]
            [--dmath]
            [--aligned]
            [--subequations]
            [--option]
            [--listing]
            [--labelbox=up|down|default]

=head1 DESCRIPTION

Examples:

=over 4

==item --dmath

Just a dmath env:

:,!lt -f % -d

=item --equation

A equation env with an aligned in it

:,!lt -f % -eq -a

=item --theorem

Print out a maketheorem block

=item --definition

Print out a makedefinition block

=item --axiom

Print out a makeaxiom block

=item --example

Print out a makeexample block

:,!lt -f % -ex='The linear case.'

==item --option

A left brace triplet of option values

:,!lt -f % --option

==item multiple options

The kitchen sink

:,!lt -eq -f % -subeq -exa='blah blah' -dmath=3 -aligned

=back 

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeter.joot@lzlabs.com

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;

($myName = $0) =~ s@.*[/\\]@@ ;
my $filename = "WHAT" ;
my $equation ;
my $boxed ;
my $bmatrix ;
my $vmatrix ;
my $dmath ;
my $aligned ;
my $example ;
my $theorem ;
my $definition ;
my $axiom ;
my $problem ;
my $oproblem ;
my $section ;
my $option ;
my $subequations ;
my $showUsage = 0 ;
my $number = 'n' ;
my $citep = 'sakurai2014modern' ;
my $subproblem ;
my $subanswer ;
my $item ;
my $enum ;
my $labelbox ;
my $listing ;

#Getopt::Long::Configure( 'pass_through' ) ;
GetOptions ( 
   'file=s'        => \$filename,
   'example:s'     => \$example,
   'theorem:s'     => \$theorem,
   'definition:s'  => \$definition,
   'axiom:s'       => \$axiom,
   'item'          => \$item,
   'enumerate'     => \$enum,
   'problem:s'     => \$problem,
   'oproblem:s'    => \$oproblem,
   'section:s'     => \$section,
   'citep:s'       => \$citep,
   'equation:i'    => \$equation,
   'subequations!' => \$subequations,
   'subproblem=s'  => \$subproblem,
   'subanswer=s'   => \$subanswer,
   'boxed'         => \$boxed,
   'option'        => \$option,
   'bmatrix'       => \$bmatrix,
   'vmatrix'       => \$vmatrix,
   'dmath:i'       => \$dmath,
   'number:i'      => \$number,
   'aligned'       => \$aligned,
   'listing'       => \$listing,
   'labelbox=s'    => \$labelbox,
   'help'          => sub { pod2usage(-verbose => 2) ; },
) ;

$filename =~ s/\.tex$// ;
$filename =~ s,.*/,, ;

my $printedEquation = 0 ;

if ( defined $example )
{
   print "\\makeexample{$example}{example:$filename:$number}{\n" ;
}

if ( defined $theorem )
{
   print "\\maketheorem{$theorem}{thm:$filename:$number}{\n" ;
}

if ( defined $definition )
{
   print "\\makedefinition{$definition}{dfn:$filename:$number}{\n" ;
}

if ( defined $axiom )
{
   print "\\makeaxiom{$axiom}{axiom:$filename:$number}{\n" ;
}

if ( defined $section )
{
   print "\\section{$section}\n" ;
}

# FIXME: have problemSkeleton too... which overlaps this.
if ( defined $problem )
{
   print "\\makeproblem{$problem}{problem:$filename:$number}{\n" ;
}

if ( defined $oproblem )
{
   print "\\makeoproblem{$oproblem}{problem:$filename:$number}{\\citep{$citep} pr. X.$number}{\n" ;
}

if ( defined $labelbox )
{
   my %howv = (
      'down' => "[ labelstyle={below of=m\\themathLableNode, below of=m\\themathLableNode} ]\n",
      'up' => "[ labelstyle={yshift=1.2em}, linestyle={} ]\n",
      'default' => '',
   ) ;

   my $orientation = $howv{$labelbox} ;
   if ( !defined $orientation )
   {
      $orientation = '' ;
   }

   print "\\mathLabelBox${orientation}{ }{ }\n" ;
#   print "\\mathLabelBox{ }{ }\n" ;
}

if ( defined $subequations )
{
   print "\\begin{subequations}\n\\label{eqn:$filename:n}\n" ;
}

if ( defined $listing )
{
   print "\\begin{lstlisting}\n" .
         "\\end{lstlisting}\n" ;
}

generateEquation( 'boxed', $boxed ) ;

generateEquation( 'dmath', $dmath ) ;

generateEquation( 'equation', $equation ) ;

if ( !$printedEquation && defined $aligned )
{
   generatePair( $aligned, 'aligned' ) ;
}

if ( !$printedEquation && defined $bmatrix )
{
   generatePair( $bmatrix, 'bmatrix' ) ;
}

if ( !$printedEquation && defined $vmatrix )
{
   generatePair( $vmatrix, 'vmatrix' ) ;
}

if ( defined $option )
{
   print "\\left\\{\n" .
         "\\begin{array}{l l}\n" .
         " & \\quad \\mbox{\\( \\)} \\\\\n" .
         " & \\quad \\mbox{\\( \\)} \n" .
         "\\end{array}\n" .
         "\\right.\n" ;
}

if ( defined $subequations )
{
   print "\\end{subequations}\n" ;
}

if ( defined $example )
{
   print "} % example\n\n" ;
}

if ( defined $definition )
{
   print "} % definition\n\n" ;
}

if ( defined $axiom )
{
   print "} % axiom\n\n" ;
}

if ( defined $theorem )
{
   print "} % theorem\n\n" ;
}

if ( defined $subproblem )
{
   print "
\\makesubproblem{}{problem:$filename:$number:$subproblem}

" ;
}

if ( defined $problem || defined $oproblem )
{

   print "} % problem\n\n" .
         "\\makeanswer{problem:$filename:$number}{\n" ;
}

if ( defined $subanswer )
{
   print "
\\makeSubAnswer{}{problem:$filename:$number:$subanswer}

" ;
}

if ( defined $problem || defined $oproblem )
{
   print "} % answer\n" ;
}

if ( defined $item )
{
   print "
\\begin{itemize}
\\item
\\end{itemize}
" ;
}

if ( defined $enum )
{
   print "
\\begin{enumerate}
\\item
\\end{enumerate}
" ;
}

exit 0 ;

sub generatePair
{
   my ($k, $n) = @_ ;

   if ( defined $k )
   {
      print "\\begin{$n}\n" .
            "\\end{$n}\n" ;
   }
}

sub generateEquation
{
   my ($envname, $var) = @_ ;
   my $begin ;
   my $end ;

   if ( $envname eq 'boxed' )
   {
      $begin = "\\boxedEquation{eqn:$filename:n}{\n" .
               "%\\begin{$envname}\\label{eqn:$filename:n}\n" ;
      $end = "%\\end{$envname}\n" .
             "}\n" ;
   }
   else
   {
      $begin = "\\begin{$envname}\\label{eqn:$filename:n}\n" ;
      $end = "\\end{$envname}\n" ;
   }

   if ( defined $var )
   {
      $printedEquation = 1 ;
      $var = 1 if ( $var == 0 ) ;

      for ( my $i = 0 ; $i < $var ; $i++ )
      {
         print $begin ;

         generatePair( $aligned, 'aligned' ) ;
         generatePair( $bmatrix, 'bmatrix' ) ;
         generatePair( $vmatrix, 'vmatrix' ) ;

         print $end ;
      }
   }
}
