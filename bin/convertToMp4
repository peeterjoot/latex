#! /usr/bin/perl

use warnings ;
use strict ;
use Getopt::Long;

my $usage = 'convertToMp4 -i inputFileName [-o outputBaseName] [-f pathToffmpeg]\n' ;
my $ffmpeg = '/cygdrive/c/Temp/ffmpeg/bin/ffmpeg' ;
my $inFileName ;
my $outBaseName ;

GetOptions( 
   'f=s'      => \$ffmpeg,
   'i=s'      => \$inFileName,
   'o=s'      => \$outBaseName,
   'help!'    => sub { die $usage ; },
) ;

die $usage unless ( defined $inFileName and -e $inFileName ) ;

my $outFileName ;

if ( !defined $outBaseName )
{
   $outBaseName = $inFileName ;
   $outBaseName =~ s/\..*// ;
}

$outFileName = "$outBaseName.mp4" ;

# another way to try (with tip for seeking):
#
#http://mathematica.stackexchange.com/questions/4232/how-to-save-animation-in-mp4-format-instead-of-avi/11958#11958
#
#The mp4 video to be generated must have even number of pixels in both dimensions. To ensure this independently from the input file, ffmpeg can be invoked as
#
#   ffmpeg -i in.avi -vf scale="trunc(iw/2)*2:trunc(ih/2)*2" -vcodec libx264 -x264opts keyint=25 out.mp4
#
#-x264opts keyint=25 ensures that keyframes be inserted at every second. This is necessary for precise seeking within the video (using the <- / -> arrow keys of the keyboard [VPlayer.swf] or the slider [StrobeMediaPlayback.swf])
#
#

my $cmd = "$ffmpeg -i $inFileName -y -vcodec libx264 $outFileName 2>&1" ;
my $retry = 0 ;
my $messageOnRetryFailure = '' ;
while ( $retry <= 1 )
{
   my $output = `$cmd` ;
   my $rc = $? >> 8 ;

   my ( $h, $w ) ;
   my ( $hc, $wc ) = ( 0, 0 ) ;
   my ( $hmod, $wmod ) = ( 0, 0 ) ;
   my $sparam = '' ;

# Stream #0:0(eng): Video: mpeg4 (Advanced Simple Profile) (mp4v / 0x7634706D), yuv420p, 609x747 [SAR 1:1 DAR 203:249], 814 kb/s, 15 fps, 15 tbr, 600 tbn, 1k tbc
   if ( $output =~ /^.*Stream.*0.0.*,\s+(\d+)x(\d+).*$/m )
   {
      ( $h, $w) = ( $1, $2 ) ;
      $hmod = $h % 2 ;
      $wmod = $w % 2 ;

      $hc = $h - $hmod ;
      $wc = $w - $wmod ;

      $sparam = "-s ${hc}x${wc}" ;
   }

   if ( $rc )
   {
      if ( $retry eq 0 )
      {
         if ( ($wmod + $hmod) eq 0)
         {
            die "command '$cmd' failed with rc = $rc.  output:\n$output\n" ;
         }
         else
         {
            $messageOnRetryFailure = "command '$cmd' failed with rc = $rc, output:\n$output\n" ;
         }
      }
      else
      {
         die "retry ffmpeg command '$cmd' failed with rc = $rc, output:\n$output\nOriginal failure:\n$messageOnRetryFailure" ;
      }

      #unlink( $outFileName ) ;
      $cmd = "$ffmpeg -i $inFileName -y -vcodec libx264 $sparam $outFileName 2>&1" ;
   }
   else
   {
      print "successfully ran command '$cmd'\n" ;

      my $baseName = $outBaseName ;
      $baseName =~ s/Fig\d+$// ;

      print "LATEX TO INCLUDE:\n\\movieFigure{$outFileName}{FIXME: CAPTION}{fig:$baseName:$outBaseName}{width=${wc}pt,height=${hc}pt}\n" ;
   }

   $retry++ ;
}
